#eureka server will use the name as ID server.
spring.application.name=api-gateway

#server port
server.port=9191

#add eureka server url in the api gateway.
#it will register to that eureka server.
eureka.instance.client.serverUrl.defaultZone=http://localhost8761/eureka/

#Routes for Employee Service
#array of index 0 and add .id. ID as employee service. basically ID for this route.
#spring.cloud.gateway.routes[0].id=EMPLOYEE-SERVICE
#configure the URL for this route
#it supports load balancing so we cand configure the eureka server
#API Gateway uses service registry or a Eureka server for load balancing.
#instead of using the load balancing url we can use the URL like: http://localhost:8081
#use either load balancing url or actual url.
# but if you need to use the inbuilt load balancer on this Netflix server, then we should have to provide the load balancing URL.
# remember, if we need to use an in-built load balancer on a Eureka Server, then we need to configure the URL like this:
#lb stands for load balancer, then followed by the service registry service ID.
# once we configure this kind of URL, then API Gateway will use the Eureka server to route a particular request to this particular microservices.
#spring.cloud.gateway.routes[0].uri=lb://EMPLOYEE-SERVICE

#configure the predicates like we need to configure the rest API path:
# we can have multiple predicates
# her we configure the destination url
# we have in the employee controller the path of this
#http://localhhost9191/employees -> whenever a client makes a request to the API gateway using this URL, then the API gateway
# will route this request to an employee service
#spring.cloud.gateway.routes[0].predicates[0]=Path=/employees/**

#http://localhhost9191/employees  api gateway will route a request to http://localhost:8081/employees

#let's configure the department service

#Routes for Department service
#spring.cloud.gateway.routes[1].id=DEPARTMENT-SERVICE
#spring.cloud.gateway.routes[1].uri=lb://DEPARTMENT-SERVICE
#spring.cloud.gateway.routes[1].predicates[1]=Path=/departments/**

#Routes for Organization service
#spring.cloud.gateway.routes[2].id=ORGANIZATION-SERVICE
#spring.cloud.gateway.routes[2].uri=lb://ORGANIZATION-SERVICE
#spring.cloud.gateway.routes[2].predicates[2]=Path=/organizations/**

#enable auto configuration api gateway discover locator.
#spring.cloud.gateway.discovery.locator.enabled=true

# we need this useful property because this property will convert the uppercase letter into lowercase
# will convert the service ID or app name in lowercase.
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

#enable logging for API gateway project that we can see the mapping routes.
#see debug logs for the mappings.
# root mappins we will see once we run our remote app and once we make a request.
logging.level.org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping=DEBUG

# * to allow any application to access our API so we can use * or you can simply give the appropiate application.
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedOrigins=*
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedMethods=GET,POST,PUT,DELETE

