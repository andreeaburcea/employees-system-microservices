#eureka will use this name as service ID
spring.application.name=employees-service
#server.port=8081
#
##database config
#spring.datasource.url=jdbc:mysql://localhost:3306/employee_db
#spring.datasource.username=root
#spring.datasource.password=root13
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
#spring.jpa.hibernate.ddl-auto=update

#configure eureka server in this microservice to register to the eureka server registry server
#eureka.instance.client.serverUrl.defaultZone=http://localhost:8761/eureka/


# config server url
spring.config.import=optional:configserver:http://localhost:8888


#rabbitMQ default properties

spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

#Micrometer for distributing tracing

#default value is 0.1, it means only 10% of the REST Calls will be traced.
# 1.0 will trace each REST call and get a display.
management.tracing.sampling.probability=1.0

# with this logging pattern the REST call Trace ID and Span ID
# will be known and can be searched on ZipKin web page.
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

#logs are known, which are helpful for testing and debugging
logging.level.org.springframework.web=DEBUG



#actuator endpoints for circuit breaker
#enable health circuit breaker
management.health.circuitbreakers.enabled=true
#enable only the health
#if you use * instead of health, will enable all the actuators
management.endpoints.web.exposure.include=health

#will show all the health details of circuit breaker
management.enpoint.health.show-details=always

#Circuit breaker configuration
# we use the circuit breaker as emp service
# use instance name as app name
# this will enable the health indicator for circuit breaker
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.registerHealthIndicator=true

#whenever the failure exists this rate, the circuit breaker status will move into open state.
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.failureRateThreshold=50

# we can easily identify how many calls are succeed or failed.
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.minimumNumberOfCalls=5

#it means the circuit breaker will wait some time in open state  and it will automatically move into half open state.
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.automaticTransitionFromOpenTOHalfOpenEnabled=true


#we configure the wait dureation in 5 seconds
# it means the circuit breaker will stay 5 seconds in open state and after that it will move into half open state.
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.waitDurationInOpenState=5s

# circuit breaker will allow 3 limited number of calls in half open state.
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.permittedNumberOfCallsInHalfOpenState=3


#used to record the outcome of calls when the circuit breaker isn't closed.
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.slidingWindowSize=10

#there are 2 types count based and time based but we use count_based
resilience4j.circuitbreaker.instances.EMPLOYEE-SERVICE.slidingWindowType=COUNT_BASED


#retry configuration

resilience4j.retry.instances.EMPLOYEE-SERVICE.registerHealthIndicator=true
resilience4j.retry.instances.EMPLOYEE-SERVICE.maxRetryAttempts=5
#wait duration for each retry attempt
resilience4j.retry.instances.EMPLOYEE-SERVICE.waitDuration=2s
